#region User-configurable variables
# --- Service Account Credentials (Optional) ---
# If you provide a username, the agent service will be configured to run as this user.
# If left blank, the agent will run as the default Local System account.
$LiongardSvcUsername = ""
$LiongardSvcPassword = "" # Note: This password is in plain text.

# --- Liongard Instance Details (Required) ---
$URL="XXX.app.liongard.com"
$Key="PasteKeyHere"
$Secret="PasteSecretHere"
$EnvironmentName="PasteEnvironmentName/RMM Variable"
#endregion

# --- Script Body ---
$Folder='C:\Liongard'
$application = Get-WmiObject -Class Win32_Product -Filter "Name = 'Liongard Agent'"
$application2 = Get-WmiObject -Class Win32_Product -Filter "Name = 'RoarAgent'"

[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

# Checks for previous installs of the Liongard agent and uninstalls them.
if ($application) {
    Write-Host "A previous install of the Liongard Agent was found! Uninstalling..."
    $application.Uninstall()
    Start-Sleep -Seconds 15 # Allow time for uninstall to complete
}
elseif ($application2) {
    Write-Host "A previous install of the RoarAgent was found! Uninstalling..."
    $application2.Uninstall()
    Start-Sleep -Seconds 15 # Allow time for uninstall to complete
}
else {
    Write-Host "No previous Liongard Agent install was found. Skipping to install."
}

# Checks if C:\Liongard exists, creates one if not, and downloads the MSI installer.
Write-Host "Checking if folder [$Folder] exists..."
if (-not (Test-Path -Path $Folder)) {
    Write-Host "Path doesn't exist. Creating Liongard folder in C:\"
    New-Item -Path $Folder -ItemType Directory -ErrorAction SilentlyContinue
}

if (Test-Path -Path $Folder) {
    Write-Host "Path confirmed. Downloading Liongard Agent installer..."
    $msiPath = Join-Path $Folder "LiongardAgent-lts.msi"
    Invoke-WebRequest -Uri "https://agents.static.liongard.com/LiongardAgent-lts.msi" -OutFile $msiPath
}
else {
    Write-Host "FATAL: Unable to create folder [$Folder]. Please check permissions. Terminating Script."
    Start-Sleep -Seconds 10
    Exit
}


# Prepares and executes the MSI installer command.
Write-Host "Preparing installation arguments..."
$msiArgs = @(
    "/i", "`"$msiPath`"",
    "LIONGARDURL=$URL",
    "LIONGARDACCESSKEY=$Key",
    "LIONGARDACCESSSECRET=$Secret",
    "LIONGARDENVIRONMENT=`"$EnvironmentName`"",
    "LIONGARDAGENTNAME=`"$env:computername`"",
    "/qn",
    "/norestart",
    "/L*V", "`"$(Join-Path $Folder 'AgentInstall.log')`""
)

# Conditionally add the service account credentials if a username is provided.
if (-not [string]::IsNullOrWhiteSpace($LiongardSvcUsername)) {
    Write-Host "Service Account username detected. Adding credentials to installer arguments."
    $msiArgs += "LIONGARDSERVICEUSERNAME=`"$LiongardSvcUsername`""
    $msiArgs += "LIONGARDSERVICEPASSWORD=`"$LiongardSvcPassword`""
} else {
    Write-Host "No Service Account username provided. Agent will be installed to run as Local System."
}

# Installs the MSI in silent mode with the specified parameters.
Write-Host "Installing the Liongard Agent. This may take a moment."
Start-Process "msiexec.exe" -ArgumentList $msiArgs -Wait -NoNewWindow

Write-Host "Liongard Agent installation process finished."
Start-Sleep -Seconds 2
